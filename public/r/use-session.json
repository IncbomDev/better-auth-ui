{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-session",
  "type": "registry:lib",
  "title": "Use Session",
  "description": "",
  "dependencies": [],
  "registryDependencies": [
    "http://localhost:3000/r/auth-client.json",
    "http://localhost:3000/r/auth-hooks.json",
    "http://localhost:3000/r/model-names.json",
    "http://localhost:3000/r/use-conditional-query.json",
    "http://localhost:3000/r/use-triplit-hooks.json",
    "http://localhost:3000/r/use-triplit-token.json"
  ],
  "files": [
    {
      "path": "src/lib/triplit/use-session.ts",
      "content": "import type { User } from \"../../types/auth-client\"\nimport type { AuthHooks } from \"../../types/auth-hooks\"\nimport { getModelName } from \"./model-names\"\nimport { useConditionalQueryOne } from \"./use-conditional-query\"\nimport type { UseTriplitOptionsProps } from \"./use-triplit-hooks\"\nimport { useTriplitToken } from \"./use-triplit-token\"\n\nexport function useSession({\n    triplit,\n    sessionData,\n    isPending,\n    refetch,\n    usePlural,\n    modelNames\n}: UseTriplitOptionsProps): ReturnType<AuthHooks[\"useSession\"]> {\n    const modelName = getModelName({\n        namespace: \"user\",\n        modelNames,\n        usePlural\n    })\n\n    const { payload } = useTriplitToken(triplit)\n\n    const { result: user, error } = useConditionalQueryOne(\n        triplit,\n        payload?.sub && triplit.query(modelName)\n    )\n\n    return {\n        data: sessionData\n            ? {\n                  session: sessionData.session,\n                  user: (sessionData?.user.id === user?.id\n                      ? user\n                      : sessionData.user) as User\n              }\n            : null,\n        error,\n        isPending: isPending,\n        refetch: refetch || (() => {})\n    }\n}\n",
      "type": "registry:lib"
    }
  ]
}